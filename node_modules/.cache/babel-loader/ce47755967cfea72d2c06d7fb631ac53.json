{"ast":null,"code":"function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport logger from \"./logger\";\n\n// Responsible for ensuring the cable connection is in good health by validating the heartbeat pings sent from the server, and attempting\n// revival reconnections if things go astray. Internal class, not intended for direct user manipulation.\n\nvar now = function now() {\n  return new Date().getTime();\n};\nvar secondsSince = function secondsSince(time) {\n  return (now() - time) / 1000;\n};\nvar ConnectionMonitor = /*#__PURE__*/function () {\n  function ConnectionMonitor(connection) {\n    _classCallCheck(this, ConnectionMonitor);\n    this.visibilityDidChange = this.visibilityDidChange.bind(this);\n    this.connection = connection;\n    this.reconnectAttempts = 0;\n  }\n  return _createClass(ConnectionMonitor, [{\n    key: \"start\",\n    value: function start() {\n      if (!this.isRunning()) {\n        this.startedAt = now();\n        delete this.stoppedAt;\n        this.startPolling();\n        addEventListener(\"visibilitychange\", this.visibilityDidChange);\n        logger.log(\"ConnectionMonitor started. stale threshold = \".concat(this.constructor.staleThreshold, \" s\"));\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.isRunning()) {\n        this.stoppedAt = now();\n        this.stopPolling();\n        removeEventListener(\"visibilitychange\", this.visibilityDidChange);\n        logger.log(\"ConnectionMonitor stopped\");\n      }\n    }\n  }, {\n    key: \"isRunning\",\n    value: function isRunning() {\n      return this.startedAt && !this.stoppedAt;\n    }\n  }, {\n    key: \"recordMessage\",\n    value: function recordMessage() {\n      this.pingedAt = now();\n    }\n  }, {\n    key: \"recordConnect\",\n    value: function recordConnect() {\n      this.reconnectAttempts = 0;\n      delete this.disconnectedAt;\n      logger.log(\"ConnectionMonitor recorded connect\");\n    }\n  }, {\n    key: \"recordDisconnect\",\n    value: function recordDisconnect() {\n      this.disconnectedAt = now();\n      logger.log(\"ConnectionMonitor recorded disconnect\");\n    }\n\n    // Private\n  }, {\n    key: \"startPolling\",\n    value: function startPolling() {\n      this.stopPolling();\n      this.poll();\n    }\n  }, {\n    key: \"stopPolling\",\n    value: function stopPolling() {\n      clearTimeout(this.pollTimeout);\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      var _this = this;\n      this.pollTimeout = setTimeout(function () {\n        _this.reconnectIfStale();\n        _this.poll();\n      }, this.getPollInterval());\n    }\n  }, {\n    key: \"getPollInterval\",\n    value: function getPollInterval() {\n      var _this$constructor = this.constructor,\n        staleThreshold = _this$constructor.staleThreshold,\n        reconnectionBackoffRate = _this$constructor.reconnectionBackoffRate;\n      var backoff = Math.pow(1 + reconnectionBackoffRate, Math.min(this.reconnectAttempts, 10));\n      var jitterMax = this.reconnectAttempts === 0 ? 1.0 : reconnectionBackoffRate;\n      var jitter = jitterMax * Math.random();\n      return staleThreshold * 1000 * backoff * (1 + jitter);\n    }\n  }, {\n    key: \"reconnectIfStale\",\n    value: function reconnectIfStale() {\n      if (this.connectionIsStale()) {\n        logger.log(\"ConnectionMonitor detected stale connection. reconnectAttempts = \".concat(this.reconnectAttempts, \", time stale = \").concat(secondsSince(this.refreshedAt), \" s, stale threshold = \").concat(this.constructor.staleThreshold, \" s\"));\n        this.reconnectAttempts++;\n        if (this.disconnectedRecently()) {\n          logger.log(\"ConnectionMonitor skipping reopening recent disconnect. time disconnected = \".concat(secondsSince(this.disconnectedAt), \" s\"));\n        } else {\n          logger.log(\"ConnectionMonitor reopening\");\n          this.connection.reopen();\n        }\n      }\n    }\n  }, {\n    key: \"refreshedAt\",\n    get: function get() {\n      return this.pingedAt ? this.pingedAt : this.startedAt;\n    }\n  }, {\n    key: \"connectionIsStale\",\n    value: function connectionIsStale() {\n      return secondsSince(this.refreshedAt) > this.constructor.staleThreshold;\n    }\n  }, {\n    key: \"disconnectedRecently\",\n    value: function disconnectedRecently() {\n      return this.disconnectedAt && secondsSince(this.disconnectedAt) < this.constructor.staleThreshold;\n    }\n  }, {\n    key: \"visibilityDidChange\",\n    value: function visibilityDidChange() {\n      var _this2 = this;\n      if (document.visibilityState === \"visible\") {\n        setTimeout(function () {\n          if (_this2.connectionIsStale() || !_this2.connection.isOpen()) {\n            logger.log(\"ConnectionMonitor reopening stale connection on visibilitychange. visibilityState = \".concat(document.visibilityState));\n            _this2.connection.reopen();\n          }\n        }, 200);\n      }\n    }\n  }]);\n}();\nConnectionMonitor.staleThreshold = 6; // Server::Connections::BEAT_INTERVAL * 2 (missed two pings)\nConnectionMonitor.reconnectionBackoffRate = 0.15;\nexport default ConnectionMonitor;","map":null,"metadata":{},"sourceType":"module"}